

import csv
import numpy as np
import matplotlib.pyplot as plt

# >>>>>>>>>>>>>>>             README, pls          <<<<<<<<<<<<<<< #

'''This script is used for vatulazation the *csv files 

generated by pd.app, which is binary excute of phases_diagram.cpp.
shell script *sfdata_plots.sh* will manage compling and ploting automatically.
''' 

# >>>>>>>>>>>>> load the *csv files into numpy array <<<<<<<<<<<<< #

### For all *csv files, delimiter is comma *,*.
### Every line corresponds to a common pressure value,
### the 0th element of every line is real vlaue of pressure (bar),
### the 1st element of every line is real value of Tc (mK).

gaps_A = np.genfromtxt ('./pd/of_gaps_A.csv', delimiter=",")
f_A = np.genfromtxt ('./pd/of_f_A.csv', delimiter=",")

gaps_B = np.genfromtxt ('./pd/of_gaps_B.csv', delimiter=",")
f_B = np.genfromtxt ('./pd/of_f_B.csv', delimiter=",")

pd = np.genfromtxt ('./pd/phase_diagram_data.csv', delimiter=",")

print(" gap_A_td data has size : ", gaps_A.shape)
print(" f_A_td data has size : ", f_A.shape)
print(" gap_B_td data has size : ", gaps_B.shape)
print(" f_B_td data has size : ", f_B.shape)

(row, col) = f_B.shape
                                              
# >>>>>>>>>>>>>        gap plot        <<<<<<<<<<<<<<< #

fig1, ax1 = plt.subplots(1,1);

for r in range(0, row, 30):
    
    ax1.plot(gaps_A[r,1]*np.linspace(0.,1.,col-2), gaps_A[r,2:],'-', label="A: {} bar".format(gaps_A[r,0]))
    ax1.plot(gaps_B[r,1]*np.linspace(0.,1.,col-2), gaps_B[r,2:],'--', label="B: {} bar".format(gaps_B[r,0]))
    
    
ax1.set_xlabel(r'$T/mK$',fontsize = 18.0)
ax1.set_ylabel(r'$\Delta_{A(B)}/k_{b}T_{c}(p)$',fontsize = 18.0)

ax1.legend(prop={'size': 18}, loc=1);
ax1.grid(True)


fig2, ax2 = plt.subplots(1,1);

for r in range(100, row, 20):
    
    ax2.plot(gaps_A[r,1]*np.linspace(0.,1.,col-2), gaps_A[r,2:],'-', label="A: {} bar".format(gaps_A[r,0]))
    ax2.plot(gaps_B[r,1]*np.linspace(0.,1.,col-2), gaps_B[r,2:],'--', label="B: {} bar".format(gaps_B[r,0]))
    
    
ax2.set_xlabel(r'$T/mK$',fontsize = 18.0)
ax2.set_ylabel(r'$\Delta_{A(B)}/k_{b}T_{c}(p)$',fontsize = 18.0)

ax2.legend(prop={'size': 18}, loc=1);
ax2.grid(True)



# >>>>>>>>>>>>>   fulk free energy plot   <<<<<<<<<<<<<<< #

fig3, ax3 = plt.subplots(1,1);

for r in range(0, row, 30):
    
    ax3.plot(f_A[r,1]*np.linspace(0.,1.,col-2), f_A[r,2:],'-', label="A: {} bar".format(f_A[r,0]))
    ax3.plot(f_B[r,1]*np.linspace(0.,1.,col-2), f_B[r,2:],'--', label="B: {} bar".format(f_B[r,0]))
    
    
ax3.set_xlabel(r'$T/mK$',fontsize = 18.0)
ax3.set_ylabel(r'$f_{A(B)}/{\frac{1}{3}N(0)(k_{b}T_{c})^{2}}$',fontsize = 18.0)

ax3.legend(prop={'size': 18}, loc=4);
ax3.grid(True)

fig4, ax4 = plt.subplots(1,1);

for r in range(110, row, 20):
    
    ax4.plot(f_A[r,1]*np.linspace(0.,1.,col-2), f_A[r,2:],'-', label="A: {} bar".format(f_A[r,0]))
    ax4.plot(f_B[r,1]*np.linspace(0.,1.,col-2), f_B[r,2:],'--', label="B: {} bar".format(f_B[r,0]))
    
    
ax4.set_xlabel(r'$T/mK$',fontsize = 18.0)
ax4.set_ylabel(r'$f_{A(B)}/{\frac{1}{3}N(0)(k_{b}T_{c})^{2}}$',fontsize = 18.0)

ax4.legend(prop={'size': 18}, loc=4);
ax4.grid(True)

# >>>>>>>>>>>>>>>>  free plot for rth row <<<<<<<<<<<<<<<< #

fig5, ax5 = plt.subplots(1,1)

r = round(30/0.17); print(" r is ", r, " r*0.17 = ", r*0.17)

ax5.plot(f_A[r,1]*np.linspace(0.,1.,col-2), f_A[r,2:],'-', label="A: {} bar".format(f_A[r,0]))
ax5.plot(f_B[r,1]*np.linspace(0.,1.,col-2), f_B[r,2:],'--', label="B: {} bar".format(f_B[r,0]))

ax5.set_xlabel(r'$T/mK$',fontsize = 18.0)
ax5.set_ylabel(r'$f_{A(B)}/{\frac{1}{3}N(0)(k_{b}T_{c})^{2}}$',fontsize = 18.0)

ax5.legend(prop={'size': 18}, loc=4)
ax5.grid(True)


# ******************************************************** #
# >>>>>>>>>>>>    equlibrium phase diagram   <<<<<<<<<<<<< #
# ******************************************************** #


fig6, ax6 = plt.subplots(1,1)

ax6.plot(pd[:,2], pd[:,0], 'b-', label=r"$T_{c}^{Greywall}$")

boolean_arr = pd[:,1] != 0.
# print(boolean_arr," \n\n ", pd[:,1][boolean_arr])
ax6.plot(pd[:,1][boolean_arr], pd[:,0][boolean_arr], 'r-', label=r"$T_{AB}^{rws19}$")

ax6.set_xlabel(r'$T/mK$',fontsize = 18.0)
ax6.set_ylabel(r'$p/bar$',fontsize = 18.0)

ax6.legend(prop={'size': 18}, loc=2)
# ax6.grid(True)
ax6.set_ylim([0., 34.]);ax6.set_xlim([0., 2.486]);
ax6.set_title(r"bulk equlibrium phase diagram, $H=0$")

text_kwargs1 = dict(ha='center', va='center', fontsize=28, color='C1')
text_kwargs2 = dict(ha='center', va='center', fontsize=28, color='blue')
text_kwargs3 = dict(ha='center', va='center', fontsize=28, color='black')
plt.text(2.212, 30., 'A', **text_kwargs1)
plt.text(1.4, 17., 'B', **text_kwargs2)
plt.text(2.1, 4.7, 'Normal', **text_kwargs3)

plt.show()

